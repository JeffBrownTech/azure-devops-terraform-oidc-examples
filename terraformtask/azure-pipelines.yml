# TerraformTask example with service connection using Workload Identity federation (OIDC).
# Ideally nothing changes in this deployment as the authentication is performed through the service connection.

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables: 
- name: workingDirectory
  value: 'terraformtask'

stages:
- stage: validate
  displayName: 'Validate'
  jobs:
    - job: Validate
      steps:
      - checkout: self
        clean: true

      - task: TerraformInstaller@1
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'

      - task: TerraformTaskV4@4
        displayName: 'terraform init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(workingDirectory)'
          backendServiceArm: '<service connection>'
          backendAzureRmResourceGroupName: '<resource group name>'
          backendAzureRmStorageAccountName: '<storage account name>'
          backendAzureRmContainerName: '<container name>'
          backendAzureRmKey: '<state file name>'
        env:
          ARM_USE_AZUREAD: true
      
      - task: TerraformTaskV4@4
        displayName: 'terraform validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(workingDirectory)'
      
      - task: TerraformTaskV4@4
        displayName: 'terraform plan'
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(workingDirectory)'
          environmentServiceNameAzureRM: '<service connection>'
        env:
          ARM_USE_AZUREAD: true

- stage: deploy
  displayName: 'Deploy'
  dependsOn:
  - validate
  jobs:
    - job: 'Deploy'
      steps:
      - checkout: self
        clean: true
      
      - task: TerraformInstaller@1
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'

      - task: TerraformTaskV4@4
        displayName: 'terraform init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(workingDirectory)'
          backendServiceArm: '<service connection>'
          backendAzureRmResourceGroupName: '<resource group name>'
          backendAzureRmStorageAccountName: '<storage account name>'
          backendAzureRmContainerName: '<container name>'
          backendAzureRmKey: '<state file name>'
        env:
          ARM_USE_AZUREAD: true

      - task: TerraformTaskV4@4
        displayName: 'terraform apply'
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(workingDirectory)'
          environmentServiceNameAzureRM: '<service connection>'
        env:
          ARM_USE_AZUREAD: true